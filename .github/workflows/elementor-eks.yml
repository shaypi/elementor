name: Apply/Destroy elementor eks
on:
  push:
    branches:
      - main
    paths:
      - 'terraform/environments/test/sg/**'
      - 'terraform/environments/test/eks/**'
      - 'terraform/environments/test/aws-vpc/**'
      - 'terraform/environments/test/elementor/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/environments/test/sg/**'
      - 'terraform/environments/test/eks/**'
      - 'terraform/environments/test/aws-vpc/**'
      - 'terraform/environments/test/elementor/**'
  workflow_dispatch:
    inputs:
      condition:
        type: choice
        description: 'Apply or Destroy'
        options:
          - apply
          - destroy
        required: true
        default: 'apply'
        

env:
  AWS_REGION: eu-west-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install third-party dependencies
        run: |
          apt-get update && apt-get install -y zip curl

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
           apt-get update
           apt-get dist-upgrade -y
           apt-get install -y less

      - name: Install Terraform
        run: |
          DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install software-properties-common
          apt-get update && apt-get install -y gnupg wget
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
              https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
              tee /etc/apt/sources.list.d/hashicorp.list
          apt update
          apt-get -y install terraform
          terraform --version

      - name: Configure AWS credentials
        run: |
          mkdir ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=${AWS_REGION}" >> ~/.aws/config

      - name: Configure backend
        working-directory: terraform/environments/test/elementor
        run: |
          cat <<EOF > elementor-backend.conf
          encrypt = true
          bucket = "elementor-global-state"
          key = "env/elementor/terraform.tfstate"
          region = "${AWS_REGION}"
          access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          EOF
      
      - name: Initialize Terraform
        working-directory: terraform/environments/test/elementor
        run: terraform init -backend-config=elementor-backend.conf
        
      - name: Terraform Plan
        working-directory: terraform/environments/test/elementor
        run: |
          terraform validate /
          terraform fmt /
          terraform init -backend-config=elementor-backend.conf
          terraform plan -var-file="elementor.tfvars"
        id: plan
        
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply/Destroy
        working-directory: terraform/environments/test/elementor
        run: |
          terraform validate /
          terraform fmt /
          terraform init -backend-config=elementor-backend.conf
          terraform ${{ github.event.inputs.condition }} -var-file="elementor.tfvars" -auto-approve
          
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
